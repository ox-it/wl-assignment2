<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
    <class name="org.sakaiproject.assignment2.model.Assignment2" table="A2_ASSIGNMENT_T">
       
        <id name="assignmentId" column="ASSIGNMENT_ID" type="long">
					<generator class="native">
						<param name="sequence">A2_ASSIGNMENT_S</param>
					</generator>
				</id>
        
        <version name="version" type="integer" column="VERSION"/>
        
       	<property name="gradableObjectId" type="java.lang.Long">
            <column name="GRADABLE_OBJECT_ID" not-null="false"  />
        </property>

        <property name="contextId" type="java.lang.String">
            <column name="CONTEXT" not-null="true" length="99" />
        </property>
        <!-- the title of this assignment -->
        <property name="title" type="java.lang.String">
            <column name="TITLE" not-null="true" length="255" />
        </property>
        <!-- the draft status for this assignment -->
        <property name="draft" type="java.lang.Boolean">
            <column name="DRAFT" not-null="true" />
        </property>
        <!-- the index used for ordering assignments in the UI -->
        <property name="sortIndex" type="integer">
            <column name="SORT_INDEX" not-null="true" />
        </property>
        <!-- The first time at which the assignment can be viewed -->
        <property name="openTime" type="java.util.Date">
            <column name="OPEN_TIME" not-null="true" />
        </property>
        <!-- The time after which responses to this assignment are considered late -->
        <property name="acceptUntilTime" type="java.util.Date">
            <column name="ACCEPT_UNTIL_TIME" not-null="true" />
        </property>
        <!-- mark this assignment as ungraded and will not be linked to GB -->
        <property name="ungraded" type="java.lang.Boolean">
            <column name="UNGRADED" not-null="true" />
        </property>
        <!-- stores due date for ungraded assign, only situation where not stored in gb -->
        <property name="dueDateForUngraded" type="java.util.Date">
            <column name="DUE_DATE_FOR_UNGRADED" />
        </property>
        <!-- whether this assignment will be submitted as a group -->
        <property name="groupSubmission" type="java.lang.Boolean">
            <column name="GROUP_SUBMISSION" />
        </property>
        <!-- true if viewing this assignment is restricted to members of specific group(s) -->
        <property name="restrictedToGroups" type="java.lang.Boolean">
            <column name="RESTRICTED_TO_GROUPS" not-null="true" />
        </property>
        <!-- true if assignment requires student to agree to honor pledge -->
        <property name="honorPledge" type="java.lang.Boolean">
            <column name="HONOR_PLEDGE" not-null="true" />
        </property>
        <!-- assignment instructions -->
        <property name="instructions" type="text">
            <column name="INSTRUCTIONS" />
        </property>
        <!-- submission type: inline, non-electronic, etc.  -->
        <property name="submissionType" type="integer" >
            <column name="SUBMISSION_TYPE" not-null="true"/>
        </property>
        <!-- notification type: none, email for each submission, etc.  -->
        <property name="notificationType" type="integer" >
            <column name="NOTIFICATION_TYPE" not-null="true"/>
        </property>
        <property name="hasAnnouncement" type="java.lang.Boolean">
        	<column name="HAS_ANNOUNCEMENT" not-null="true" />
        </property>
        <!-- used if assignment open date is added as an announcement  -->
        <property name="announcementId" type="java.lang.String" >
            <column name="ANNOUNCEMENT_ID" length="99" />
        </property>
        <!-- used if assignment is included in the schedule  -->
        <property name="calendarEventId" type="java.lang.String" >
            <column name="CALENDAR_EVENT_ID" length="36" />
        </property>
        <!-- allow resubmissions until due date  -->
        <property name="allowResubmitUntilDue" type="java.lang.Boolean" >
            <column name="ALLOW_RESUBMIT_UNTIL_DUE" not-null="true" />
        </property>
        <!-- allow a review service  -->
        <property name="allowReviewService" type="java.lang.Boolean" >
            <column name="ALLOW_REVIEW_SERVICE"  />
        </property>
        <!-- allow student to view the review report  -->
        <property name="allowStudentViewReport" type="java.lang.Boolean" >
            <column name="ALLOW_STUDENT_VIEW_REPORT" />
        </property>
        <!-- assignment creator  -->
        <property name="creator" type="java.lang.String" >
            <column name="CREATOR" length="99" not-null="true" />
        </property>
        <!-- assignment create time  -->
        <property name="createTime" type="java.util.Date" >
            <column name="CREATE_TIME" not-null="true" />
        </property>
        <!-- assignment last modifier  -->
        <property name="modifiedBy" type="java.lang.String" >
            <column name="MODIFIED_BY" length="99" />
        </property>
        <!-- last modified time  -->
        <property name="modifiedTime" type="java.util.Date" >
            <column name="MODIFIED_TIME" />
        </property>
        <!-- true if this assignment was deleted -->
        <property name="removed" type="java.lang.Boolean" >
        		<column name="REMOVED" not-null="true" />
        </property>
        
        <set name="attachmentSet" lazy="true" inverse="true" cascade="save-update">
	        <key column="ASSIGNMENT_ID"/>                        
	        <one-to-many class="org.sakaiproject.assignment2.model.AssignmentAttachment"/>            
    		</set>
              
        <set name="assignmentGroupSet" lazy="true" inverse="true" cascade="save-update">
	        <key column="ASSIGNMENT_ID"/>                        
	        <one-to-many class="org.sakaiproject.assignment2.model.AssignmentGroup"/>            
    		</set>
    </class>
    
    <query name="findAssignmentsWithGroups">
    <![CDATA[from org.sakaiproject.assignment2.model.Assignment2 assignment
             left join fetch assignment.assignmentGroupSet
             where assignment.contextId = :contextId
             and assignment.removed = false]]>
  	</query>
  	
  	<query name="findAssignmentByIdWithGroupsAndAttachments">
    <![CDATA[from org.sakaiproject.assignment2.model.Assignment2 assignment
             left join fetch assignment.assignmentGroupSet
             left join fetch assignment.attachmentSet
             where assignment.assignmentId = :assignmentId
             and assignment.removed = false]]>
  	</query>
  	
  	<query name="findAssignmentByIdWithGroups">
    <![CDATA[from org.sakaiproject.assignment2.model.Assignment2 assignment
             left join fetch assignment.assignmentGroupSet
             where assignment.assignmentId = :assignmentId
             and assignment.removed = false]]>
  	</query>
</hibernate-mapping>